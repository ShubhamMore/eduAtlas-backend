{"version":3,"sources":["src/app/pages/institute/tests/create-test/create-test.component.html","src/app/pages/institute/tests/create-tests-score/create-tests-score.component.html","src/app/pages/institute/tests/manage-tests-score/manage-tests-score.component.html","src/app/pages/institute/tests/manage-tests/manage-tests.component.html","src/app/pages/institute/tests/tests.component.html","src/app/pages/institute/tests/create-test/create-test.component.scss","src/app/pages/institute/tests/create-test/create-test.component.ts","src/app/pages/institute/tests/create-tests-score/create-tests-score.component.scss","src/app/pages/institute/tests/create-tests-score/create-tests-score.component.ts","src/app/pages/institute/tests/manage-tests-score/manage-tests-score.component.scss","src/app/pages/institute/tests/manage-tests-score/manage-tests-score.component.ts","src/app/pages/institute/tests/manage-tests/manage-tests.component.scss","src/app/pages/institute/tests/manage-tests/manage-tests.component.ts","src/app/pages/institute/tests/tests-routing.module.ts","src/app/pages/institute/tests/tests.component.ts","src/app/pages/institute/tests/tests.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<p style=\\\"color: black; font-weight: bold;\\\">Create Tesr</p>\\r\\n\\r\\n<nb-card *ngIf=\\\"display\\\">\\r\\n  <nb-card-body>\\r\\n    <form [formGroup]=\\\"createTestForm\\\" (submit)=\\\"createTest()\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <label for=\\\"courseId\\\">*Course</label>\\r\\n          <nb-select\\r\\n            placeholder=\\\"Select Course\\\"\\r\\n            id=\\\"courseId\\\"\\r\\n            [status]=\\\"\\r\\n              createTestForm.get('courseId').invalid && createTestForm.get('courseId').touched\\r\\n                ? 'danger'\\r\\n                : 'basic'\\r\\n            \\\"\\r\\n            fullWidth\\r\\n            formControlName=\\\"courseId\\\"\\r\\n            (selectedChange)=\\\"onSelectCourse($event)\\\"\\r\\n          >\\r\\n            <nb-option value=\\\"\\\">Select Course</nb-option>\\r\\n            <nb-option *ngFor=\\\"let i of institute.course\\\" [value]=\\\"i._id\\\">{{ i.name }}</nb-option>\\r\\n          </nb-select>\\r\\n          <small\\r\\n            *ngIf=\\\"createTestForm.get('courseId').invalid && createTestForm.get('courseId').touched\\\"\\r\\n            >*Course is required</small\\r\\n          >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <label for=\\\"batchId\\\">*Batch</label>\\r\\n          <nb-select\\r\\n            placeholder=\\\"Select Batch\\\"\\r\\n            id=\\\"batchId\\\"\\r\\n            formControlName=\\\"batchId\\\"\\r\\n            fullWidth\\r\\n            [status]=\\\"\\r\\n              createTestForm.get('batchId').invalid && createTestForm.get('batchId').touched\\r\\n                ? 'danger'\\r\\n                : 'basic'\\r\\n            \\\"\\r\\n          >\\r\\n            <nb-option value=\\\"\\\">Select Batch</nb-option>\\r\\n            <nb-option *ngFor=\\\"let item of batches\\\" [value]=\\\"item._id\\\">{{\\r\\n              item.batchCode\\r\\n            }}</nb-option>\\r\\n          </nb-select>\\r\\n          <small\\r\\n            *ngIf=\\\"createTestForm.get('batchId').invalid && createTestForm.get('batchId').touched\\\"\\r\\n            >*Batch is required</small\\r\\n          >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"date\\\">*Date</label>\\r\\n            <input\\r\\n              type=\\\"date\\\"\\r\\n              nbInput\\r\\n              [status]=\\\"\\r\\n                createTestForm.get('date').invalid && createTestForm.get('date').touched\\r\\n                  ? 'danger'\\r\\n                  : 'basic'\\r\\n              \\\"\\r\\n              id=\\\"date\\\"\\r\\n              fullWidth\\r\\n              formControlName=\\\"date\\\"\\r\\n              placeholder=\\\"date\\\"\\r\\n            />\\r\\n            <small *ngIf=\\\"createTestForm.get('date').invalid && createTestForm.get('date').touched\\\"\\r\\n              >*Date is required</small\\r\\n            >\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"testName\\\">*Test Name</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              nbInput\\r\\n              [status]=\\\"\\r\\n                createTestForm.get('testName').invalid && createTestForm.get('testName').touched\\r\\n                  ? 'danger'\\r\\n                  : 'basic'\\r\\n              \\\"\\r\\n              id=\\\"testName\\\"\\r\\n              fullWidth\\r\\n              formControlName=\\\"testName\\\"\\r\\n              placeholder=\\\"testName\\\"\\r\\n            />\\r\\n            <small\\r\\n              *ngIf=\\\"\\r\\n                createTestForm.get('testName').invalid && createTestForm.get('testName').touched\\r\\n              \\\"\\r\\n              >*Test Name is required</small\\r\\n            >\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"totalMarks\\\">*Total Marks</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              nbInput\\r\\n              pattern=\\\"\\\\d*\\\"\\r\\n              maxlength=\\\"3\\\"\\r\\n              [status]=\\\"\\r\\n                createTestForm.get('totalMarks').invalid && createTestForm.get('totalMarks').touched\\r\\n                  ? 'danger'\\r\\n                  : 'basic'\\r\\n              \\\"\\r\\n              id=\\\"totalMarks\\\"\\r\\n              fullWidth\\r\\n              formControlName=\\\"totalMarks\\\"\\r\\n              placeholder=\\\"Total Marks\\\"\\r\\n            />\\r\\n            <small\\r\\n              *ngIf=\\\"\\r\\n                createTestForm.get('totalMarks').invalid && createTestForm.get('totalMarks').touched\\r\\n              \\\"\\r\\n              >*Marks is required</small\\r\\n            >\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\">Save</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </nb-card-body>\\r\\n</nb-card>\\r\\n\"","export default \"<p style=\\\"color: black; font-weight: bold;\\\"></p>\\n\\n<nb-card *ngIf=\\\"display\\\">\\n  <nb-card-body>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-4\\\">\\n        <label for=\\\"courseId\\\"><strong>Course: </strong>{{ course }}</label>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <label for=\\\"batchId\\\"><strong>Batch: </strong>{{ batch }}</label>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"date\\\"><strong>Date: </strong>{{ test.date }}</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"testName\\\"><strong>Test Name: </strong>{{ test.testName }}</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"totalMarks\\\"><strong>Total Marks: </strong>{{ test.totalMarks }}</label>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <nb-checkbox\\n          (checkedChange)=\\\"changeFieUpload($event)\\\"\\n          [(ngModel)]=\\\"fileUpload\\\"\\n          fullWidth\\n          status=\\\"basic\\\"\\n          >Upload Test File</nb-checkbox\\n        >\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\\"!fileUpload\\\">\\n      <div *ngIf=\\\"studentScore.length > 0; else noStudents\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12\\\">\\n            <table class=\\\"table table-borderless text-center\\\">\\n              <thead>\\n                <tr>\\n                  <th class=\\\"\\\">Roll No</th>\\n                  <th class=\\\"\\\">Score</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <ng-container *ngFor=\\\"let student of studentScore; let i = index\\\">\\n                  <tr>\\n                    <td>{{ student.rollNo }}</td>\\n\\n                    <td>\\n                      <input\\n                        type=\\\"number\\\"\\n                        nbInput\\n                        pattern=\\\"\\\\d*\\\"\\n                        maxlength=\\\"3\\\"\\n                        [id]=\\\"student.studentId\\\"\\n                        [value]=\\\"student.marks\\\"\\n                        (input)=\\\"addMarks($event, i)\\\"\\n                      />\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n              </tbody>\\n            </table>\\n          </div>\\n        </div>\\n      </div>\\n      <ng-template #noStudents>\\n        <p class=\\\"pt-5 text-center\\\">No Students Found</p>\\n      </ng-template>\\n    </div>\\n    <div *ngIf=\\\"fileUpload\\\">\\n      <input\\n        type=\\\"file\\\"\\n        nbInput\\n        status=\\\"basic\\\"\\n        fullWidth\\n        id=\\\"score\\\"\\n        (change)=\\\"onFilePicked($event)\\\"\\n      />\\n      <span style=\\\"color: #f00;\\\" *ngIf=\\\"invalidFile\\\"\\n        >*File format must be *.xsl, *.xlsx, *.csv</span\\n      >\\n      <p *ngIf=\\\"file && !invalidFile\\\">{{ file.name }}</p>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\" (click)=\\\"addScore()\\\">\\n          Save\\n        </button>\\n      </div>\\n    </div>\\n  </nb-card-body>\\n</nb-card>\\n\"","export default \"<div class=\\\"row mb-2\\\">\\n  <div class=\\\"col-12\\\">\\n    <p style=\\\"color: black; font-weight: bold;\\\">Test Score</p>\\n  </div>\\n</div>\\n\\n<nb-card status=\\\"info\\\" *ngIf=\\\"display\\\">\\n  <nb-card-header>\\n    <div class=\\\"row mb-2\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <h3 class=\\\"text-white\\\">Test</h3>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Course\\\"\\n          status=\\\"basic\\\"\\n          fullWidth\\n          (selectedChange)=\\\"onSelectCourse($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Course</nb-option>\\n          <nb-option *ngFor=\\\"let course of institute.course\\\" [value]=\\\"course._id\\\">{{\\n            course.name\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Batch\\\"\\n          fullWidth\\n          status=\\\"basic\\\"\\n          (selectedChange)=\\\"onSelectBatch($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Batch</nb-option>\\n          <nb-option *ngFor=\\\"let batch of batches\\\" [value]=\\\"batch._id\\\">{{\\n            batch.batchCode\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n    </div>\\n  </nb-card-header>\\n  <nb-card-body>\\n    <div class=\\\"row\\\" style=\\\"width: 100%;\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"table-responsive\\\" *ngIf=\\\"tests.length > 0; else noTests\\\">\\n          <table class=\\\"table table-borderless\\\">\\n            <thead>\\n              <tr>\\n                <th>Test Title</th>\\n                <th>Test Date</th>\\n                <th></th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let test of tests; let i = index\\\">\\n                <td>{{ test.testName }}</td>\\n                <td>{{ test.date }}</td>\\n                <td>\\n                  <button class=\\\"mr-3 mb-1\\\" nbButton status=\\\"warning\\\" (click)=\\\"edit(test._id)\\\">\\n                    Edit\\n                  </button>\\n                </td>\\n                <td>\\n                  <button\\n                    class=\\\"mr-3 mb-1\\\"\\n                    nbButton\\n                    status=\\\"warning\\\"\\n                    (click)=\\\"createTestScore(test._id)\\\"\\n                  >\\n                    Upload Score\\n                  </button>\\n                </td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n        <ng-template #noTests>\\n          <p class=\\\"text-center pt-5\\\">No Tests Available</p>\\n        </ng-template>\\n      </div>\\n    </div>\\n  </nb-card-body>\\n</nb-card>\\n\"","export default \"<div class=\\\"row mb-2\\\">\\n  <div class=\\\"col-12\\\">\\n    <button class=\\\"btn btn-warning text-white float-right\\\" (click)=\\\"createTest()\\\">\\n      Create Test\\n    </button>\\n    <p style=\\\"color: black; font-weight: bold;\\\">Define Tests</p>\\n  </div>\\n</div>\\n\\n<nb-card status=\\\"info\\\" *ngIf=\\\"display\\\">\\n  <nb-card-header>\\n    <div class=\\\"row mb-2\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <h3 class=\\\"text-white\\\">Test</h3>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Course\\\"\\n          status=\\\"basic\\\"\\n          fullWidth\\n          (selectedChange)=\\\"onSelectCourse($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Course</nb-option>\\n          <nb-option *ngFor=\\\"let course of institute.course\\\" [value]=\\\"course._id\\\">{{\\n            course.name\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Batch\\\"\\n          fullWidth\\n          status=\\\"basic\\\"\\n          (selectedChange)=\\\"onSelectBatch($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Batch</nb-option>\\n          <nb-option *ngFor=\\\"let batch of batches\\\" [value]=\\\"batch._id\\\">{{\\n            batch.batchCode\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n    </div>\\n  </nb-card-header>\\n  <nb-card-body>\\n    <div class=\\\"row\\\" style=\\\"width: 100%;\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"table-responsive\\\" *ngIf=\\\"tests.length > 0; else noTests\\\">\\n          <table class=\\\"table table-borderless\\\">\\n            <thead>\\n              <tr>\\n                <th>Test Title</th>\\n                <th>Test Date</th>\\n                <th></th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let test of tests; let i = index\\\">\\n                <td>{{ test.testName }}</td>\\n                <td>{{ test.date }}</td>\\n                <td>\\n                  <button class=\\\"mr-3 mb-1\\\" nbButton status=\\\"warning\\\" (click)=\\\"edit(test._id)\\\">\\n                    Edit\\n                  </button>\\n                  <button\\n                    class=\\\"mr-3 mb-1\\\"\\n                    nbButton\\n                    status=\\\"warning\\\"\\n                    (click)=\\\"score(test._id, test.batchId)\\\"\\n                  >\\n                    Score\\n                  </button>\\n                  <button\\n                    class=\\\"mr-3 mb-1\\\"\\n                    nbButton\\n                    status=\\\"danger\\\"\\n                    (click)=\\\"deleteTest(test._id, i)\\\"\\n                  >\\n                    Delete\\n                  </button>\\n                </td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n        <ng-template #noTests>\\n          <p class=\\\"text-center pt-5\\\">No Tests Available</p>\\n        </ng-template>\\n      </div>\\n    </div>\\n  </nb-card-body>\\n</nb-card>\\n\"","export default \"<router-outlet></router-outlet>\\r\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9jcmVhdGUtdGVzdC9jcmVhdGUtdGVzdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { NbToastrService } from '@nebular/theme';\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from '../../../../services/api.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'ngx-create-test',\r\n  templateUrl: './create-test.component.html',\r\n  styleUrls: ['./create-test.component.scss'],\r\n})\r\nexport class CreateTestComponent implements OnInit {\r\n  createTestForm: FormGroup;\r\n  instituteId: string;\r\n  institute: any;\r\n\r\n  batches: any[] = [];\r\n  display: boolean;\r\n\r\n  testId: any;\r\n  test: any;\r\n  edit: string;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private api: ApiService,\r\n    private router: Router,\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private toasterService: NbToastrService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.display = false;\r\n\r\n    this.instituteId = this.route.snapshot.paramMap.get('id');\r\n\r\n    this.route.queryParams.subscribe((param) => {\r\n      this.testId = param.test;\r\n      this.edit = param.edit;\r\n    });\r\n    this.getCourses(this.instituteId);\r\n\r\n    this.createTestForm = this.fb.group({\r\n      batchId: ['', Validators.required],\r\n      courseId: ['', Validators.required],\r\n      instituteId: [this.instituteId],\r\n      date: ['', Validators.required],\r\n      testName: ['', Validators.required],\r\n      totalMarks: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  getTest(id: string) {\r\n    this.api.getSingleTest({ _id: id }).subscribe(\r\n      (data: any) => {\r\n        this.test = data;\r\n        this.createTestForm.patchValue({\r\n          instituteId: this.test.instituteId,\r\n          courseId: this.test.courseId,\r\n          date: this.test.date,\r\n          testName: this.test.testName,\r\n          totalMarks: this.test.totalMarks,\r\n        });\r\n\r\n        this.onSelectCourse(this.test.courseId);\r\n\r\n        this.createTestForm.patchValue({\r\n          batchId: this.test.batchId,\r\n        });\r\n        this.display = true;\r\n      },\r\n      (err: any) => {},\r\n    );\r\n  }\r\n\r\n  getCourses(id: string) {\r\n    this.api.getCourseTD(id).subscribe((data: any) => {\r\n      this.institute = data;\r\n      if (this.edit) {\r\n        this.getTest(this.testId);\r\n      } else {\r\n        this.display = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSelectCourse(id: string) {\r\n    this.batches = this.institute.batch.filter((b: any) => b.course === id);\r\n  }\r\n\r\n  createTest() {\r\n    this.createTestForm.markAllAsTouched();\r\n    if (this.createTestForm.valid) {\r\n      if (!this.edit) {\r\n        this.api.addTest(this.createTestForm.value).subscribe(\r\n          (res) => {\r\n            this.showToast('top right', 'success', 'Test Added Successfully');\r\n            this.location.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToast('top right', 'danger', err.err.message);\r\n          },\r\n        );\r\n      } else {\r\n        const test = this.createTestForm.value;\r\n        test._id = this.test._id;\r\n        this.api.updateTest(test).subscribe(\r\n          (res) => {\r\n            this.showToast('top right', 'success', 'Test Updated Successfully');\r\n            this.location.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToast('top right', 'danger', err.err.message);\r\n          },\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  showToast(position: any, status: any, message: any) {\r\n    this.toasterService.show(status, message, { position, status });\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9jcmVhdGUtdGVzdHMtc2NvcmUvY3JlYXRlLXRlc3RzLXNjb3JlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { NbToastrService } from '@nebular/theme';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { ApiService } from './../../../../services/api.service';\nimport { FormGroup, FormBuilder, FormArray, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-create-tests-score',\n  templateUrl: './create-tests-score.component.html',\n  styleUrls: ['./create-tests-score.component.scss'],\n})\nexport class CreateTestsScoreComponent implements OnInit {\n  testId: string;\n  instituteId: string;\n  institute: any;\n  students: any[];\n  file: File;\n  fileUpload: boolean;\n  invalidFile: boolean;\n  test: any;\n  course: string;\n  batch: string;\n  display: boolean;\n  studentScore: any[];\n  constructor(\n    private fb: FormBuilder,\n    private api: ApiService,\n    private route: ActivatedRoute,\n    private location: Location,\n    private toasterService: NbToastrService,\n  ) {}\n\n  ngOnInit() {\n    this.display = false;\n    this.invalidFile = false;\n    this.fileUpload = false;\n    this.instituteId = this.route.snapshot.paramMap.get('id');\n    this.route.queryParams.subscribe((param) => {\n      this.testId = param.test;\n    });\n    this.getCourses(this.instituteId);\n    this.students = [];\n    this.studentScore = [];\n  }\n\n  changeFieUpload(event: any) {\n    this.fileUpload = event;\n  }\n\n  onFilePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n\n    const imgExt: string[] = ['xsl', 'xlsx', 'csv'];\n    const ext = file.name.substring(file.name.lastIndexOf('.') + 1).toLowerCase();\n    if (!(imgExt.indexOf(ext) !== -1)) {\n      this.invalidFile = true;\n      return;\n    }\n    this.invalidFile = false;\n    this.file = file;\n  }\n\n  getCourses(id: string) {\n    this.api.getCourseTD(id).subscribe((data: any) => {\n      this.institute = data;\n      if (this.testId) {\n        this.getTest(this.testId);\n      } else {\n        this.location.back();\n      }\n    });\n  }\n\n  getTest(id: string) {\n    this.api.getSingleTest({ _id: id }).subscribe(\n      (res: any) => {\n        this.test = res;\n        this.course = this.institute.course.find(\n          (c: any) => c._id === this.test.courseId,\n        ).courseCode;\n        this.batch = this.institute.batch.find((b: any) => b._id === this.test.batchId).batchCode;\n        if (this.test.students.length > 0) {\n          this.studentScore = this.test.students;\n        } else {\n          this.getStudents(res.instituteId, res.batchId, res.courseId);\n        }\n        this.display = true;\n      },\n      (err) => {},\n    );\n  }\n\n  getStudents(instituteID: string, batchId: string, courseId: string) {\n    this.api.getStudentsByBatch(instituteID, courseId, batchId).subscribe((res: any[]) => {\n      this.students = res;\n      this.students.sort((student1, student2) => {\n        if (+student1.instituteDetails.rollNumber >= +student2.instituteDetails.rollNumber) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n\n      this.students.forEach((student) => {\n        const scoreData = {\n          studentId: student._id,\n          rollNo: student.instituteDetails.rollNumber,\n          marks: '',\n        };\n\n        this.studentScore.push(scoreData);\n      });\n    });\n  }\n\n  addMarks(event: any, i: number) {\n    const mark = event.target.value;\n    this.studentScore[i].marks = mark;\n  }\n\n  addScore() {\n    if (!this.fileUpload) {\n      this.api.addTestScore({ _id: this.test._id, scores: this.studentScore }).subscribe(\n        (res) => {\n          this.showToast('top right', 'success', 'Score Updated Successfully');\n          this.location.back();\n        },\n        (err) => {\n          this.showToast('top right', 'danger', err.err.message);\n        },\n      );\n    } else {\n      if (this.file) {\n        const scoreFile = new FormData();\n        scoreFile.append('_id', this.test._id);\n        scoreFile.append('uploadfile', this.file, this.test.testName);\n\n        this.api.addScoreUsingExcel(scoreFile).subscribe(\n          (res) => {\n            this.showToast('top right', 'success', 'Score File Updated Successfully');\n            this.location.back();\n          },\n          (err) => {\n            this.showToast('top right', 'danger', err.err.message);\n          },\n        );\n      } else {\n        this.invalidFile = true;\n      }\n    }\n  }\n\n  showToast(position: any, status: any, message: any) {\n    this.toasterService.show(status, message, { position, status });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9tYW5hZ2UtdGVzdHMtc2NvcmUvbWFuYWdlLXRlc3RzLXNjb3JlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { NbToastrService } from '@nebular/theme';\nimport { ApiService } from './../../../../services/api.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-manage-tests-score',\n  templateUrl: './manage-tests-score.component.html',\n  styleUrls: ['./manage-tests-score.component.scss'],\n})\nexport class ManageTestsScoreComponent implements OnInit {\n  institute: any;\n  instituteId: string;\n  batches: any[] = [];\n  display: boolean;\n  courseId: string;\n  batch: string;\n\n  tests: any[];\n\n  constructor(\n    private api: ApiService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toasterService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.display = false;\n    this.tests = [];\n    this.instituteId = this.route.snapshot.paramMap.get('id');\n\n    this.getCourses(this.instituteId);\n  }\n\n  getCourses(id: string) {\n    this.api.getCourseTD(id).subscribe((data: any) => {\n      this.institute = data;\n      this.display = true;\n    });\n  }\n\n  onSelectCourse(id: string) {\n    this.courseId = id;\n    this.batches = this.institute.batch.filter((b: any) => b.course === id);\n  }\n\n  onSelectBatch(batchId: string) {\n    this.batch = batchId;\n    this.getTests(this.instituteId, batchId);\n  }\n\n  createTestScore(id: any) {\n    this.router.navigate([`/pages/institute/test/add-test-score/${this.instituteId}`], {\n      queryParams: { test: id },\n    });\n  }\n\n  edit(id: string) {\n    this.router.navigate([`/pages/institute/test/add-test-score/${this.instituteId}/edit`], {\n      queryParams: { test: id, edit: 'true' },\n    });\n  }\n  getTests(instituteId: any, batchId: any) {\n    this.api.getTestByBatch({ instituteId: instituteId, batchId: batchId }).subscribe(\n      (res: any) => {\n        this.tests = res;\n      },\n      (err) => {\n        this.showToast('top right', 'danger', err.err.message);\n      },\n    );\n  }\n\n  showToast(position: any, status: any, message: any) {\n    this.toasterService.show(status, message, { position, status });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9tYW5hZ2UtdGVzdHMvbWFuYWdlLXRlc3RzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { NbToastrService } from '@nebular/theme';\nimport { ApiService } from './../../../../services/api.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-manage-tests',\n  templateUrl: './manage-tests.component.html',\n  styleUrls: ['./manage-tests.component.scss'],\n})\nexport class ManageTestsComponent implements OnInit {\n  institute: any;\n  instituteId: string;\n  batches: any[] = [];\n  display: boolean;\n  courseId: string;\n  batch: string;\n\n  tests: any[];\n\n  constructor(\n    private api: ApiService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toasterService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.display = false;\n    this.tests = [];\n    this.instituteId = this.route.snapshot.paramMap.get('id');\n    console.log(this.route.snapshot.paramMap, this.instituteId);\n    this.getCourses(this.instituteId);\n  }\n\n  getCourses(id: string) {\n    this.api.getCourseTD(id).subscribe((data: any) => {\n      this.institute = data;\n      console.log(data);\n      this.display = true;\n    });\n  }\n\n  onSelectCourse(id: string) {\n    this.courseId = id;\n    this.batches = this.institute.batch.filter((b: any) => b.course === id);\n  }\n\n  onSelectBatch(batchId: string) {\n    this.batch = batchId;\n    this.getTests(this.instituteId, batchId);\n  }\n\n  createTest() {\n    this.router.navigate([`/pages/institute/test/create-test/${this.instituteId}`], {\n      queryParams: {},\n    });\n  }\n\n  edit(id: string) {\n    this.router.navigate([`/pages/institute/test/create-test/${this.instituteId}/edit`], {\n      queryParams: { test: id, edit: 'true' },\n    });\n  }\n\n  score(id: string, batchId: string) {\n    this.router.navigate([`/pages/institute/test/add-test-score/${this.instituteId}`], {\n      queryParams: { test: id, batch: batchId },\n    });\n  }\n\n  deleteTest(id: string, i: number) {\n    this.api.deleteTest({ _id: id }).subscribe(\n      (res: any) => {\n        this.tests.splice(i, 1);\n        this.showToast('top right', 'success', 'Test Deleted Successfully');\n      },\n      (err) => {\n        this.showToast('top right', 'danger', err.err.message);\n      },\n    );\n  }\n\n  getTests(instituteId: any, batchId: any) {\n    this.api.getTestByBatch({ instituteId: instituteId, batchId: batchId }).subscribe(\n      (res: any) => {\n        this.tests = res;\n        console.log(res);\n      },\n      (err) => {\n        console.log(err);\n      },\n    );\n  }\n\n  showToast(position: any, status: any, message: any) {\n    this.toasterService.show(status, message, { position, status });\n  }\n}\n","import { TestsComponent } from './tests.component';\r\nimport { ManageTestsComponent } from './manage-tests/manage-tests.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateTestComponent } from './create-test/create-test.component';\r\nimport { ManageTestsScoreComponent } from './manage-tests-score/manage-tests-score.component';\r\nimport { CreateTestsScoreComponent } from './create-tests-score/create-tests-score.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TestsComponent,\r\n    children: [\r\n      { path: 'create-test/:id', component: CreateTestComponent },\r\n      { path: 'create-test/:id/edit', component: CreateTestComponent },\r\n      { path: 'manage-test/:id', component: ManageTestsComponent },\r\n\r\n      { path: 'add-test-score/:id', component: CreateTestsScoreComponent },\r\n      { path: 'add-test-score/:id/edit', component: CreateTestsScoreComponent },\r\n      { path: 'manage-test-score/:id', component: ManageTestsScoreComponent },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TestsRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-tests',\r\n  templateUrl: './tests.component.html',\r\n  styleUrls: [],\r\n})\r\nexport class TestsComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TestsRoutingModule } from './tests-routing.module';\r\nimport { TestsComponent } from './tests.component';\r\nimport { CreateTestComponent } from './create-test/create-test.component';\r\nimport { ManageTestsComponent } from './manage-tests/manage-tests.component';\r\nimport {\r\n  NbCardModule,\r\n  NbLayoutModule,\r\n  NbInputModule,\r\n  NbButtonModule,\r\n  NbCheckboxModule,\r\n  NbDatepickerModule,\r\n  NbSelectModule,\r\n  NbMenuModule,\r\n  NbAccordionModule,\r\n  NbListModule,\r\n} from '@nebular/theme';\r\nimport { NbEvaIconsModule } from '@nebular/eva-icons';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ManageTestsScoreComponent } from './manage-tests-score/manage-tests-score.component';\r\nimport { CreateTestsScoreComponent } from './create-tests-score/create-tests-score.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TestsComponent,\r\n    CreateTestComponent,\r\n    CreateTestsScoreComponent,\r\n    ManageTestsComponent,\r\n    ManageTestsScoreComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TestsRoutingModule,\r\n    ReactiveFormsModule,\r\n    NbCardModule,\r\n    NbLayoutModule,\r\n    FormsModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    NbDatepickerModule,\r\n    NbSelectModule,\r\n    NbMenuModule,\r\n    NbAccordionModule,\r\n    NbEvaIconsModule,\r\n    NbListModule,\r\n  ],\r\n})\r\nexport class TestsModule {}\r\n"],"sourceRoot":"webpack:///","file":"tests-tests-module-es5.js"}