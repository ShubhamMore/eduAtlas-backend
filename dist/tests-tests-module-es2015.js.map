{"version":3,"sources":["./src/app/pages/institute/tests/create-test/create-test.component.html","./src/app/pages/institute/tests/create-tests-score/create-tests-score.component.html","./src/app/pages/institute/tests/manage-tests-score/manage-tests-score.component.html","./src/app/pages/institute/tests/manage-tests/manage-tests.component.html","./src/app/pages/institute/tests/tests.component.html","./src/app/pages/institute/tests/create-test/create-test.component.scss","./src/app/pages/institute/tests/create-test/create-test.component.ts","./src/app/pages/institute/tests/create-tests-score/create-tests-score.component.scss","./src/app/pages/institute/tests/create-tests-score/create-tests-score.component.ts","./src/app/pages/institute/tests/manage-tests-score/manage-tests-score.component.scss","./src/app/pages/institute/tests/manage-tests-score/manage-tests-score.component.ts","./src/app/pages/institute/tests/manage-tests/manage-tests.component.scss","./src/app/pages/institute/tests/manage-tests/manage-tests.component.ts","./src/app/pages/institute/tests/tests-routing.module.ts","./src/app/pages/institute/tests/tests.component.ts","./src/app/pages/institute/tests/tests.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,wFAAyB,mBAAmB,s1BAAs1B,UAAU,u1BAAu1B,kDAAkD,sgG;;;;;;;;;;;;ACApyD;AAAe,wFAAyB,mBAAmB,8KAA8K,UAAU,mHAAmH,SAAS,qJAAqJ,aAAa,8KAA8K,iBAAiB,kLAAkL,mBAAmB,8aAA8a,waAAwa,qEAAqE,kBAAkB,y7BAAy7B,uIAAuI,aAAa,qQ;;;;;;;;;;;;ACA/4F;AAAe,gJAAiF,mBAAmB,mkBAAmkB,uCAAuC,yYAAyY,2CAA2C,gJAAgJ,uGAAuG,gUAAgU,yCAAyC,iBAAiB,6BAA6B,aAAa,yxB;;;;;;;;;;;;ACA5yD;AAAe,0QAA2M,mBAAmB,qkBAAqkB,uCAAuC,yYAAyY,2CAA2C,gJAAgJ,uGAAuG,gUAAgU,yCAAyC,iBAAiB,6BAA6B,aAAa,y/B;;;;;;;;;;;;ACAx6D;AAAe,oG;;;;;;;;;;;;ACAf;AAAe,6GAA8C,uL;;;;;;;;;;;;;;;;;;;;;;ACAZ;AAEC;AACkB;AACN;AACL;AACd;AAO3C,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAY9B,YACU,EAAe,EACf,GAAe,EACf,MAAc,EACd,QAAkB,EAClB,KAAqB,EACrB,cAA+B;QAL/B,OAAE,GAAF,EAAE,CAAa;QACf,QAAG,GAAH,GAAG,CAAY;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAU;QAClB,UAAK,GAAL,KAAK,CAAgB;QACrB,mBAAc,GAAd,cAAc,CAAiB;QAbzC,YAAO,GAAU,EAAE,CAAC;IAcjB,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE1D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACzC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAElC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAClC,OAAO,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAClC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,WAAW,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC;YAC/B,IAAI,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC/B,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,UAAU,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACtC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,SAAS,CAC3C,CAAC,IAAS,EAAE,EAAE;YACZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;gBAC7B,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW;gBAClC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAC5B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;gBACpB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAC5B,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU;aACjC,CAAC,CAAC;YAEH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAExC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;gBAC7B,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;aAC3B,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,EACD,CAAC,GAAQ,EAAE,EAAE,GAAE,CAAC,CACjB,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC3B;iBAAM;gBACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACrB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,EAAU;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,UAAU;QACR,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACd,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,SAAS,CACnD,CAAC,GAAG,EAAE,EAAE;oBACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,yBAAyB,CAAC,CAAC;oBAClE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC,EACD,CAAC,GAAQ,EAAE,EAAE;oBACX,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzD,CAAC,CACF,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;gBACvC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,CACjC,CAAC,GAAG,EAAE,EAAE;oBACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,2BAA2B,CAAC,CAAC;oBACpE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC,EACD,CAAC,GAAQ,EAAE,EAAE;oBACX,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzD,CAAC,CACF,CAAC;aACH;SACF;IACH,CAAC;IAED,SAAS,CAAC,QAAa,EAAE,MAAW,EAAE,OAAY;QAChD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAClE,CAAC;CACF;;YAnGe,0DAAW;YACV,gEAAU;YACP,sDAAM;YACJ,wDAAQ;YACX,8DAAc;YACL,8DAAe;;AAlB9B,mBAAmB;IAL/B,+DAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;QAC3B,2PAA2C;;KAE5C,CAAC;2EAcc,0DAAW;QACV,gEAAU;QACP,sDAAM;QACJ,wDAAQ;QACX,8DAAc;QACL,8DAAe;GAlB9B,mBAAmB,CAgH/B;AAhH+B;;;;;;;;;;;;;ACbhC;AAAe,6GAA8C,2M;;;;;;;;;;;;;;;;;;;;;;ACAZ;AACN;AACM;AACe;AACe;AAC7B;AAOlD,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAapC,YACU,EAAe,EACf,GAAe,EACf,KAAqB,EACrB,QAAkB,EAClB,cAA+B;QAJ/B,OAAE,GAAF,EAAE,CAAa;QACf,QAAG,GAAH,GAAG,CAAY;QACf,UAAK,GAAL,KAAK,CAAgB;QACrB,aAAQ,GAAR,QAAQ,CAAU;QAClB,mBAAc,GAAd,cAAc,CAAiB;IACtC,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACzC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,eAAe,CAAC,KAAU;QACxB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,YAAY,CAAC,KAAY;QACvB,MAAM,IAAI,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEzD,MAAM,MAAM,GAAa,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAChD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9E,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,OAAO;SACR;QACD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC3B;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,SAAS,CAC3C,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CACtC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CACzC,CAAC,UAAU,CAAC;YACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC;YAC1F,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;aACxC;iBAAM;gBACL,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;aAC9D;YACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE,GAAE,CAAC,CACZ,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,WAAmB,EAAE,OAAe,EAAE,QAAgB;QAChE,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,GAAU,EAAE,EAAE;YACnF,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;gBACxC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE;oBAClF,OAAO,CAAC,CAAC;iBACV;qBAAM;oBACL,OAAO,CAAC,CAAC,CAAC;iBACX;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAChC,MAAM,SAAS,GAAG;oBAChB,SAAS,EAAE,OAAO,CAAC,GAAG;oBACtB,MAAM,EAAE,OAAO,CAAC,gBAAgB,CAAC,UAAU;oBAC3C,KAAK,EAAE,EAAE;iBACV,CAAC;gBAEF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,KAAU,EAAE,CAAS;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,SAAS,CAChF,CAAC,GAAG,EAAE,EAAE;gBACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,4BAA4B,CAAC,CAAC;gBACrE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACvB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;gBACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACzD,CAAC,CACF,CAAC;SACH;aAAM;YACL,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,MAAM,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC;gBACjC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvC,SAAS,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE9D,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,SAAS,CAC9C,CAAC,GAAG,EAAE,EAAE;oBACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,iCAAiC,CAAC,CAAC;oBAC1E,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;oBACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzD,CAAC,CACF,CAAC;aACH;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;SACF;IACH,CAAC;IAED,SAAS,CAAC,QAAa,EAAE,MAAW,EAAE,OAAY;QAChD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAClE,CAAC;CACF;;YAlIe,0DAAW;YACV,gEAAU;YACR,8DAAc;YACX,wDAAQ;YACF,8DAAe;;AAlB9B,yBAAyB;IALrC,+DAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,gRAAkD;;KAEnD,CAAC;2EAec,0DAAW;QACV,gEAAU;QACR,8DAAc;QACX,wDAAQ;QACF,8DAAe;GAlB9B,yBAAyB,CAgJrC;AAhJqC;;;;;;;;;;;;;ACZtC;AAAe,6GAA8C,2M;;;;;;;;;;;;;;;;;;;;ACAZ;AACe;AACd;AACO;AAOzD,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAUpC,YACU,GAAe,EACf,MAAc,EACd,KAAqB,EACrB,cAA+B;QAH/B,QAAG,GAAH,GAAG,CAAY;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,mBAAc,GAAd,cAAc,CAAiB;QAXzC,YAAO,GAAU,EAAE,CAAC;IAYjB,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE1D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,EAAU;QACvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,aAAa,CAAC,OAAe;QAC3B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,eAAe,CAAC,EAAO;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,wCAAwC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE;YACjF,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;SAC1B,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,EAAU;QACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,wCAAwC,IAAI,CAAC,WAAW,OAAO,CAAC,EAAE;YACtF,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SACxC,CAAC,CAAC;IACL,CAAC;IACD,QAAQ,CAAC,WAAgB,EAAE,OAAY;QACrC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAC/E,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACnB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzD,CAAC,CACF,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,QAAa,EAAE,MAAW,EAAE,OAAY;QAChD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAClE,CAAC;CACF;;YAxDgB,gEAAU;YACP,sDAAM;YACP,8DAAc;YACL,8DAAe;;AAd9B,yBAAyB;IALrC,+DAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,gRAAkD;;KAEnD,CAAC;2EAYe,gEAAU;QACP,sDAAM;QACP,8DAAc;QACL,8DAAe;GAd9B,yBAAyB,CAmErC;AAnEqC;;;;;;;;;;;;;ACVtC;AAAe,6GAA8C,2L;;;;;;;;;;;;;;;;;;;;ACAZ;AACe;AACd;AACO;AAOzD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAU/B,YACU,GAAe,EACf,MAAc,EACd,KAAqB,EACrB,cAA+B;QAH/B,QAAG,GAAH,GAAG,CAAY;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,mBAAc,GAAd,cAAc,CAAiB;QAXzC,YAAO,GAAU,EAAE,CAAC;IAYjB,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,EAAU;QACvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,aAAa,CAAC,OAAe;QAC3B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,UAAU;QACR,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,qCAAqC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE;YAC9E,WAAW,EAAE,EAAE;SAChB,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,EAAU;QACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,qCAAqC,IAAI,CAAC,WAAW,OAAO,CAAC,EAAE;YACnF,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SACxC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,EAAU,EAAE,OAAe;QAC/B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,wCAAwC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE;YACjF,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE;SAC1C,CAAC,CAAC;IACL,CAAC;IAED,UAAU,CAAC,EAAU,EAAE,CAAS;QAC9B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,SAAS,CACxC,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,2BAA2B,CAAC,CAAC;QACtE,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzD,CAAC,CACF,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,WAAgB,EAAE,OAAY;QACrC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAC/E,CAAC,GAAQ,EAAE,EAAE;YACX,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;YACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CACF,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,QAAa,EAAE,MAAW,EAAE,OAAY;QAChD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAClE,CAAC;CACF;;YA7EgB,gEAAU;YACP,sDAAM;YACP,8DAAc;YACL,8DAAe;;AAd9B,oBAAoB;IALhC,+DAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;QAC5B,8PAA4C;;KAE7C,CAAC;2EAYe,gEAAU;QACP,sDAAM;QACP,8DAAc;QACL,8DAAe;GAd9B,oBAAoB,CAwFhC;AAxFgC;;;;;;;;;;;;;;;;;;;;;;;;ACVkB;AAC0B;AACpC;AACc;AACmB;AACoB;AACA;AAE9F,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+DAAc;QACzB,QAAQ,EAAE;YACR,EAAE,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,sFAAmB,EAAE;YAC3D,EAAE,IAAI,EAAE,sBAAsB,EAAE,SAAS,EAAE,sFAAmB,EAAE;YAChE,EAAE,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,yFAAoB,EAAE;YAE5D,EAAE,IAAI,EAAE,oBAAoB,EAAE,SAAS,EAAE,0GAAyB,EAAE;YACpE,EAAE,IAAI,EAAE,yBAAyB,EAAE,SAAS,EAAE,0GAAyB,EAAE;YACzE,EAAE,IAAI,EAAE,uBAAuB,EAAE,SAAS,EAAE,0GAAyB,EAAE;SACxE;KACF;CACF,CAAC;AAMF,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;CAAG;AAArB,kBAAkB;IAJ9B,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,kBAAkB,CAAG;AAAH;;;;;;;;;;;;;;;;;;AC5BmB;AAOlD,IAAa,cAAc,GAA3B,MAAa,cAAc;IACzB,gBAAe,CAAC;IAEhB,QAAQ,KAAI,CAAC;CACd;AAJY,cAAc;IAL1B,+DAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,mOAAqC;KAEtC,CAAC;;GACW,cAAc,CAI1B;AAJ0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPc;AACM;AAEa;AACT;AACuB;AACG;AAYrD;AAC8B;AACY;AAC4B;AACA;AA4B9F,IAAa,WAAW,GAAxB,MAAa,WAAW;CAAG;AAAd,WAAW;IA1BvB,8DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,+DAAc;YACd,sFAAmB;YACnB,2GAAyB;YACzB,yFAAoB;YACpB,2GAAyB;SAC1B;QACD,OAAO,EAAE;YACP,4DAAY;YACZ,wEAAkB;YAClB,kEAAmB;YACnB,2DAAY;YACZ,6DAAc;YACd,0DAAW;YACX,4DAAa;YACb,6DAAc;YACd,+DAAgB;YAChB,iEAAkB;YAClB,6DAAc;YACd,2DAAY;YACZ,gEAAiB;YACjB,mEAAgB;YAChB,2DAAY;SACb;KACF,CAAC;GACW,WAAW,CAAG;AAAH","file":"tests-tests-module-es2015.js","sourcesContent":["export default \"<p style=\\\"color: black; font-weight: bold;\\\">Create Tesr</p>\\r\\n\\r\\n<nb-card *ngIf=\\\"display\\\">\\r\\n  <nb-card-body>\\r\\n    <form [formGroup]=\\\"createTestForm\\\" (submit)=\\\"createTest()\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <label for=\\\"courseId\\\">*Course</label>\\r\\n          <nb-select\\r\\n            placeholder=\\\"Select Course\\\"\\r\\n            id=\\\"courseId\\\"\\r\\n            [status]=\\\"\\r\\n              createTestForm.get('courseId').invalid && createTestForm.get('courseId').touched\\r\\n                ? 'danger'\\r\\n                : 'basic'\\r\\n            \\\"\\r\\n            fullWidth\\r\\n            formControlName=\\\"courseId\\\"\\r\\n            (selectedChange)=\\\"onSelectCourse($event)\\\"\\r\\n          >\\r\\n            <nb-option value=\\\"\\\">Select Course</nb-option>\\r\\n            <nb-option *ngFor=\\\"let i of institute.course\\\" [value]=\\\"i._id\\\">{{ i.name }}</nb-option>\\r\\n          </nb-select>\\r\\n          <small\\r\\n            *ngIf=\\\"createTestForm.get('courseId').invalid && createTestForm.get('courseId').touched\\\"\\r\\n            >*Course is required</small\\r\\n          >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <label for=\\\"batchId\\\">*Batch</label>\\r\\n          <nb-select\\r\\n            placeholder=\\\"Select Batch\\\"\\r\\n            id=\\\"batchId\\\"\\r\\n            formControlName=\\\"batchId\\\"\\r\\n            fullWidth\\r\\n            [status]=\\\"\\r\\n              createTestForm.get('batchId').invalid && createTestForm.get('batchId').touched\\r\\n                ? 'danger'\\r\\n                : 'basic'\\r\\n            \\\"\\r\\n          >\\r\\n            <nb-option value=\\\"\\\">Select Batch</nb-option>\\r\\n            <nb-option *ngFor=\\\"let item of batches\\\" [value]=\\\"item._id\\\">{{\\r\\n              item.batchCode\\r\\n            }}</nb-option>\\r\\n          </nb-select>\\r\\n          <small\\r\\n            *ngIf=\\\"createTestForm.get('batchId').invalid && createTestForm.get('batchId').touched\\\"\\r\\n            >*Batch is required</small\\r\\n          >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"date\\\">*Date</label>\\r\\n            <input\\r\\n              type=\\\"date\\\"\\r\\n              nbInput\\r\\n              [status]=\\\"\\r\\n                createTestForm.get('date').invalid && createTestForm.get('date').touched\\r\\n                  ? 'danger'\\r\\n                  : 'basic'\\r\\n              \\\"\\r\\n              id=\\\"date\\\"\\r\\n              fullWidth\\r\\n              formControlName=\\\"date\\\"\\r\\n              placeholder=\\\"date\\\"\\r\\n            />\\r\\n            <small *ngIf=\\\"createTestForm.get('date').invalid && createTestForm.get('date').touched\\\"\\r\\n              >*Date is required</small\\r\\n            >\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"testName\\\">*Test Name</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              nbInput\\r\\n              [status]=\\\"\\r\\n                createTestForm.get('testName').invalid && createTestForm.get('testName').touched\\r\\n                  ? 'danger'\\r\\n                  : 'basic'\\r\\n              \\\"\\r\\n              id=\\\"testName\\\"\\r\\n              fullWidth\\r\\n              formControlName=\\\"testName\\\"\\r\\n              placeholder=\\\"testName\\\"\\r\\n            />\\r\\n            <small\\r\\n              *ngIf=\\\"\\r\\n                createTestForm.get('testName').invalid && createTestForm.get('testName').touched\\r\\n              \\\"\\r\\n              >*Test Name is required</small\\r\\n            >\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"totalMarks\\\">*Total Marks</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              nbInput\\r\\n              pattern=\\\"\\\\d*\\\"\\r\\n              maxlength=\\\"3\\\"\\r\\n              [status]=\\\"\\r\\n                createTestForm.get('totalMarks').invalid && createTestForm.get('totalMarks').touched\\r\\n                  ? 'danger'\\r\\n                  : 'basic'\\r\\n              \\\"\\r\\n              id=\\\"totalMarks\\\"\\r\\n              fullWidth\\r\\n              formControlName=\\\"totalMarks\\\"\\r\\n              placeholder=\\\"Total Marks\\\"\\r\\n            />\\r\\n            <small\\r\\n              *ngIf=\\\"\\r\\n                createTestForm.get('totalMarks').invalid && createTestForm.get('totalMarks').touched\\r\\n              \\\"\\r\\n              >*Marks is required</small\\r\\n            >\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\">Save</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </nb-card-body>\\r\\n</nb-card>\\r\\n\"","export default \"<p style=\\\"color: black; font-weight: bold;\\\"></p>\\n\\n<nb-card *ngIf=\\\"display\\\">\\n  <nb-card-body>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-4\\\">\\n        <label for=\\\"courseId\\\"><strong>Course: </strong>{{ course }}</label>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <label for=\\\"batchId\\\"><strong>Batch: </strong>{{ batch }}</label>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"date\\\"><strong>Date: </strong>{{ test.date }}</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"testName\\\"><strong>Test Name: </strong>{{ test.testName }}</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"totalMarks\\\"><strong>Total Marks: </strong>{{ test.totalMarks }}</label>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <nb-checkbox\\n          (checkedChange)=\\\"changeFieUpload($event)\\\"\\n          [(ngModel)]=\\\"fileUpload\\\"\\n          fullWidth\\n          status=\\\"basic\\\"\\n          >Upload Test File</nb-checkbox\\n        >\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\\"!fileUpload\\\">\\n      <div *ngIf=\\\"studentScore.length > 0; else noStudents\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12\\\">\\n            <table class=\\\"table table-borderless text-center\\\">\\n              <thead>\\n                <tr>\\n                  <th class=\\\"\\\">Roll No</th>\\n                  <th class=\\\"\\\">Score</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <ng-container *ngFor=\\\"let student of studentScore; let i = index\\\">\\n                  <tr>\\n                    <td>{{ student.rollNo }}</td>\\n\\n                    <td>\\n                      <input\\n                        type=\\\"number\\\"\\n                        nbInput\\n                        pattern=\\\"\\\\d*\\\"\\n                        maxlength=\\\"3\\\"\\n                        [id]=\\\"student.studentId\\\"\\n                        [value]=\\\"student.marks\\\"\\n                        (input)=\\\"addMarks($event, i)\\\"\\n                      />\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n              </tbody>\\n            </table>\\n          </div>\\n        </div>\\n      </div>\\n      <ng-template #noStudents>\\n        <p class=\\\"pt-5 text-center\\\">No Students Found</p>\\n      </ng-template>\\n    </div>\\n    <div *ngIf=\\\"fileUpload\\\">\\n      <input\\n        type=\\\"file\\\"\\n        nbInput\\n        status=\\\"basic\\\"\\n        fullWidth\\n        id=\\\"score\\\"\\n        (change)=\\\"onFilePicked($event)\\\"\\n      />\\n      <span style=\\\"color: #f00;\\\" *ngIf=\\\"invalidFile\\\"\\n        >*File format must be *.xsl, *.xlsx, *.csv</span\\n      >\\n      <p *ngIf=\\\"file && !invalidFile\\\">{{ file.name }}</p>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\" (click)=\\\"addScore()\\\">\\n          Save\\n        </button>\\n      </div>\\n    </div>\\n  </nb-card-body>\\n</nb-card>\\n\"","export default \"<div class=\\\"row mb-2\\\">\\n  <div class=\\\"col-12\\\">\\n    <p style=\\\"color: black; font-weight: bold;\\\">Test Score</p>\\n  </div>\\n</div>\\n\\n<nb-card status=\\\"info\\\" *ngIf=\\\"display\\\">\\n  <nb-card-header>\\n    <div class=\\\"row mb-2\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <h3 class=\\\"text-white\\\">Test</h3>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Course\\\"\\n          status=\\\"basic\\\"\\n          fullWidth\\n          (selectedChange)=\\\"onSelectCourse($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Course</nb-option>\\n          <nb-option *ngFor=\\\"let course of institute.course\\\" [value]=\\\"course._id\\\">{{\\n            course.name\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Batch\\\"\\n          fullWidth\\n          status=\\\"basic\\\"\\n          (selectedChange)=\\\"onSelectBatch($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Batch</nb-option>\\n          <nb-option *ngFor=\\\"let batch of batches\\\" [value]=\\\"batch._id\\\">{{\\n            batch.batchCode\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n    </div>\\n  </nb-card-header>\\n  <nb-card-body>\\n    <div class=\\\"row\\\" style=\\\"width: 100%;\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"table-responsive\\\" *ngIf=\\\"tests.length > 0; else noTests\\\">\\n          <table class=\\\"table table-borderless\\\">\\n            <thead>\\n              <tr>\\n                <th>Test Title</th>\\n                <th>Test Date</th>\\n                <th></th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let test of tests; let i = index\\\">\\n                <td>{{ test.testName }}</td>\\n                <td>{{ test.date }}</td>\\n                <td>\\n                  <button class=\\\"mr-3 mb-1\\\" nbButton status=\\\"warning\\\" (click)=\\\"edit(test._id)\\\">\\n                    Edit\\n                  </button>\\n                </td>\\n                <td>\\n                  <button\\n                    class=\\\"mr-3 mb-1\\\"\\n                    nbButton\\n                    status=\\\"warning\\\"\\n                    (click)=\\\"createTestScore(test._id)\\\"\\n                  >\\n                    Upload Score\\n                  </button>\\n                </td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n        <ng-template #noTests>\\n          <p class=\\\"text-center pt-5\\\">No Tests Available</p>\\n        </ng-template>\\n      </div>\\n    </div>\\n  </nb-card-body>\\n</nb-card>\\n\"","export default \"<div class=\\\"row mb-2\\\">\\n  <div class=\\\"col-12\\\">\\n    <button class=\\\"btn btn-warning text-white float-right\\\" (click)=\\\"createTest()\\\">\\n      Create Test\\n    </button>\\n    <p style=\\\"color: black; font-weight: bold;\\\">Define Tests</p>\\n  </div>\\n</div>\\n\\n<nb-card status=\\\"info\\\" *ngIf=\\\"display\\\">\\n  <nb-card-header>\\n    <div class=\\\"row mb-2\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <h3 class=\\\"text-white\\\">Test</h3>\\n      </div>\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Course\\\"\\n          status=\\\"basic\\\"\\n          fullWidth\\n          (selectedChange)=\\\"onSelectCourse($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Course</nb-option>\\n          <nb-option *ngFor=\\\"let course of institute.course\\\" [value]=\\\"course._id\\\">{{\\n            course.name\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n\\n      <div class=\\\"col-sm-3\\\">\\n        <nb-select\\n          placeholder=\\\"Select Batch\\\"\\n          fullWidth\\n          status=\\\"basic\\\"\\n          (selectedChange)=\\\"onSelectBatch($event)\\\"\\n        >\\n          <nb-option value=\\\"\\\">Select Batch</nb-option>\\n          <nb-option *ngFor=\\\"let batch of batches\\\" [value]=\\\"batch._id\\\">{{\\n            batch.batchCode\\n          }}</nb-option>\\n        </nb-select>\\n      </div>\\n    </div>\\n  </nb-card-header>\\n  <nb-card-body>\\n    <div class=\\\"row\\\" style=\\\"width: 100%;\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"table-responsive\\\" *ngIf=\\\"tests.length > 0; else noTests\\\">\\n          <table class=\\\"table table-borderless\\\">\\n            <thead>\\n              <tr>\\n                <th>Test Title</th>\\n                <th>Test Date</th>\\n                <th></th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let test of tests; let i = index\\\">\\n                <td>{{ test.testName }}</td>\\n                <td>{{ test.date }}</td>\\n                <td>\\n                  <button class=\\\"mr-3 mb-1\\\" nbButton status=\\\"warning\\\" (click)=\\\"edit(test._id)\\\">\\n                    Edit\\n                  </button>\\n                  <button\\n                    class=\\\"mr-3 mb-1\\\"\\n                    nbButton\\n                    status=\\\"warning\\\"\\n                    (click)=\\\"score(test._id, test.batchId)\\\"\\n                  >\\n                    Score\\n                  </button>\\n                  <button\\n                    class=\\\"mr-3 mb-1\\\"\\n                    nbButton\\n                    status=\\\"danger\\\"\\n                    (click)=\\\"deleteTest(test._id, i)\\\"\\n                  >\\n                    Delete\\n                  </button>\\n                </td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n        <ng-template #noTests>\\n          <p class=\\\"text-center pt-5\\\">No Tests Available</p>\\n        </ng-template>\\n      </div>\\n    </div>\\n  </nb-card-body>\\n</nb-card>\\n\"","export default \"<router-outlet></router-outlet>\\r\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9jcmVhdGUtdGVzdC9jcmVhdGUtdGVzdC5jb21wb25lbnQuc2NzcyJ9 */\"","import { NbToastrService } from '@nebular/theme';\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from '../../../../services/api.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'ngx-create-test',\r\n  templateUrl: './create-test.component.html',\r\n  styleUrls: ['./create-test.component.scss'],\r\n})\r\nexport class CreateTestComponent implements OnInit {\r\n  createTestForm: FormGroup;\r\n  instituteId: string;\r\n  institute: any;\r\n\r\n  batches: any[] = [];\r\n  display: boolean;\r\n\r\n  testId: any;\r\n  test: any;\r\n  edit: string;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private api: ApiService,\r\n    private router: Router,\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private toasterService: NbToastrService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.display = false;\r\n\r\n    this.instituteId = this.route.snapshot.paramMap.get('id');\r\n\r\n    this.route.queryParams.subscribe((param) => {\r\n      this.testId = param.test;\r\n      this.edit = param.edit;\r\n    });\r\n    this.getCourses(this.instituteId);\r\n\r\n    this.createTestForm = this.fb.group({\r\n      batchId: ['', Validators.required],\r\n      courseId: ['', Validators.required],\r\n      instituteId: [this.instituteId],\r\n      date: ['', Validators.required],\r\n      testName: ['', Validators.required],\r\n      totalMarks: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  getTest(id: string) {\r\n    this.api.getSingleTest({ _id: id }).subscribe(\r\n      (data: any) => {\r\n        this.test = data;\r\n        this.createTestForm.patchValue({\r\n          instituteId: this.test.instituteId,\r\n          courseId: this.test.courseId,\r\n          date: this.test.date,\r\n          testName: this.test.testName,\r\n          totalMarks: this.test.totalMarks,\r\n        });\r\n\r\n        this.onSelectCourse(this.test.courseId);\r\n\r\n        this.createTestForm.patchValue({\r\n          batchId: this.test.batchId,\r\n        });\r\n        this.display = true;\r\n      },\r\n      (err: any) => {},\r\n    );\r\n  }\r\n\r\n  getCourses(id: string) {\r\n    this.api.getCourseTD(id).subscribe((data: any) => {\r\n      this.institute = data;\r\n      if (this.edit) {\r\n        this.getTest(this.testId);\r\n      } else {\r\n        this.display = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSelectCourse(id: string) {\r\n    this.batches = this.institute.batch.filter((b: any) => b.course === id);\r\n  }\r\n\r\n  createTest() {\r\n    this.createTestForm.markAllAsTouched();\r\n    if (this.createTestForm.valid) {\r\n      if (!this.edit) {\r\n        this.api.addTest(this.createTestForm.value).subscribe(\r\n          (res) => {\r\n            this.showToast('top right', 'success', 'Test Added Successfully');\r\n            this.location.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToast('top right', 'danger', err.err.message);\r\n          },\r\n        );\r\n      } else {\r\n        const test = this.createTestForm.value;\r\n        test._id = this.test._id;\r\n        this.api.updateTest(test).subscribe(\r\n          (res) => {\r\n            this.showToast('top right', 'success', 'Test Updated Successfully');\r\n            this.location.back();\r\n          },\r\n          (err: any) => {\r\n            this.showToast('top right', 'danger', err.err.message);\r\n          },\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  showToast(position: any, status: any, message: any) {\r\n    this.toasterService.show(status, message, { position, status });\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9jcmVhdGUtdGVzdHMtc2NvcmUvY3JlYXRlLXRlc3RzLXNjb3JlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { NbToastrService } from '@nebular/theme';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { ApiService } from './../../../../services/api.service';\nimport { FormGroup, FormBuilder, FormArray, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-create-tests-score',\n  templateUrl: './create-tests-score.component.html',\n  styleUrls: ['./create-tests-score.component.scss'],\n})\nexport class CreateTestsScoreComponent implements OnInit {\n  testId: string;\n  instituteId: string;\n  institute: any;\n  students: any[];\n  file: File;\n  fileUpload: boolean;\n  invalidFile: boolean;\n  test: any;\n  course: string;\n  batch: string;\n  display: boolean;\n  studentScore: any[];\n  constructor(\n    private fb: FormBuilder,\n    private api: ApiService,\n    private route: ActivatedRoute,\n    private location: Location,\n    private toasterService: NbToastrService,\n  ) {}\n\n  ngOnInit() {\n    this.display = false;\n    this.invalidFile = false;\n    this.fileUpload = false;\n    this.instituteId = this.route.snapshot.paramMap.get('id');\n    this.route.queryParams.subscribe((param) => {\n      this.testId = param.test;\n    });\n    this.getCourses(this.instituteId);\n    this.students = [];\n    this.studentScore = [];\n  }\n\n  changeFieUpload(event: any) {\n    this.fileUpload = event;\n  }\n\n  onFilePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n\n    const imgExt: string[] = ['xsl', 'xlsx', 'csv'];\n    const ext = file.name.substring(file.name.lastIndexOf('.') + 1).toLowerCase();\n    if (!(imgExt.indexOf(ext) !== -1)) {\n      this.invalidFile = true;\n      return;\n    }\n    this.invalidFile = false;\n    this.file = file;\n  }\n\n  getCourses(id: string) {\n    this.api.getCourseTD(id).subscribe((data: any) => {\n      this.institute = data;\n      if (this.testId) {\n        this.getTest(this.testId);\n      } else {\n        this.location.back();\n      }\n    });\n  }\n\n  getTest(id: string) {\n    this.api.getSingleTest({ _id: id }).subscribe(\n      (res: any) => {\n        this.test = res;\n        this.course = this.institute.course.find(\n          (c: any) => c._id === this.test.courseId,\n        ).courseCode;\n        this.batch = this.institute.batch.find((b: any) => b._id === this.test.batchId).batchCode;\n        if (this.test.students.length > 0) {\n          this.studentScore = this.test.students;\n        } else {\n          this.getStudents(res.instituteId, res.batchId, res.courseId);\n        }\n        this.display = true;\n      },\n      (err) => {},\n    );\n  }\n\n  getStudents(instituteID: string, batchId: string, courseId: string) {\n    this.api.getStudentsByBatch(instituteID, courseId, batchId).subscribe((res: any[]) => {\n      this.students = res;\n      this.students.sort((student1, student2) => {\n        if (+student1.instituteDetails.rollNumber >= +student2.instituteDetails.rollNumber) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n\n      this.students.forEach((student) => {\n        const scoreData = {\n          studentId: student._id,\n          rollNo: student.instituteDetails.rollNumber,\n          marks: '',\n        };\n\n        this.studentScore.push(scoreData);\n      });\n    });\n  }\n\n  addMarks(event: any, i: number) {\n    const mark = event.target.value;\n    this.studentScore[i].marks = mark;\n  }\n\n  addScore() {\n    if (!this.fileUpload) {\n      this.api.addTestScore({ _id: this.test._id, scores: this.studentScore }).subscribe(\n        (res) => {\n          this.showToast('top right', 'success', 'Score Updated Successfully');\n          this.location.back();\n        },\n        (err) => {\n          this.showToast('top right', 'danger', err.err.message);\n        },\n      );\n    } else {\n      if (this.file) {\n        const scoreFile = new FormData();\n        scoreFile.append('_id', this.test._id);\n        scoreFile.append('uploadfile', this.file, this.test.testName);\n\n        this.api.addScoreUsingExcel(scoreFile).subscribe(\n          (res) => {\n            this.showToast('top right', 'success', 'Score File Updated Successfully');\n            this.location.back();\n          },\n          (err) => {\n            this.showToast('top right', 'danger', err.err.message);\n          },\n        );\n      } else {\n        this.invalidFile = true;\n      }\n    }\n  }\n\n  showToast(position: any, status: any, message: any) {\n    this.toasterService.show(status, message, { position, status });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9tYW5hZ2UtdGVzdHMtc2NvcmUvbWFuYWdlLXRlc3RzLXNjb3JlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { NbToastrService } from '@nebular/theme';\nimport { ApiService } from './../../../../services/api.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-manage-tests-score',\n  templateUrl: './manage-tests-score.component.html',\n  styleUrls: ['./manage-tests-score.component.scss'],\n})\nexport class ManageTestsScoreComponent implements OnInit {\n  institute: any;\n  instituteId: string;\n  batches: any[] = [];\n  display: boolean;\n  courseId: string;\n  batch: string;\n\n  tests: any[];\n\n  constructor(\n    private api: ApiService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toasterService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.display = false;\n    this.tests = [];\n    this.instituteId = this.route.snapshot.paramMap.get('id');\n\n    this.getCourses(this.instituteId);\n  }\n\n  getCourses(id: string) {\n    this.api.getCourseTD(id).subscribe((data: any) => {\n      this.institute = data;\n      this.display = true;\n    });\n  }\n\n  onSelectCourse(id: string) {\n    this.courseId = id;\n    this.batches = this.institute.batch.filter((b: any) => b.course === id);\n  }\n\n  onSelectBatch(batchId: string) {\n    this.batch = batchId;\n    this.getTests(this.instituteId, batchId);\n  }\n\n  createTestScore(id: any) {\n    this.router.navigate([`/pages/institute/test/add-test-score/${this.instituteId}`], {\n      queryParams: { test: id },\n    });\n  }\n\n  edit(id: string) {\n    this.router.navigate([`/pages/institute/test/add-test-score/${this.instituteId}/edit`], {\n      queryParams: { test: id, edit: 'true' },\n    });\n  }\n  getTests(instituteId: any, batchId: any) {\n    this.api.getTestByBatch({ instituteId: instituteId, batchId: batchId }).subscribe(\n      (res: any) => {\n        this.tests = res;\n      },\n      (err) => {\n        this.showToast('top right', 'danger', err.err.message);\n      },\n    );\n  }\n\n  showToast(position: any, status: any, message: any) {\n    this.toasterService.show(status, message, { position, status });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luc3RpdHV0ZS90ZXN0cy9tYW5hZ2UtdGVzdHMvbWFuYWdlLXRlc3RzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { NbToastrService } from '@nebular/theme';\nimport { ApiService } from './../../../../services/api.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-manage-tests',\n  templateUrl: './manage-tests.component.html',\n  styleUrls: ['./manage-tests.component.scss'],\n})\nexport class ManageTestsComponent implements OnInit {\n  institute: any;\n  instituteId: string;\n  batches: any[] = [];\n  display: boolean;\n  courseId: string;\n  batch: string;\n\n  tests: any[];\n\n  constructor(\n    private api: ApiService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private toasterService: NbToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    this.display = false;\n    this.tests = [];\n    this.instituteId = this.route.snapshot.paramMap.get('id');\n    console.log(this.route.snapshot.paramMap, this.instituteId);\n    this.getCourses(this.instituteId);\n  }\n\n  getCourses(id: string) {\n    this.api.getCourseTD(id).subscribe((data: any) => {\n      this.institute = data;\n      console.log(data);\n      this.display = true;\n    });\n  }\n\n  onSelectCourse(id: string) {\n    this.courseId = id;\n    this.batches = this.institute.batch.filter((b: any) => b.course === id);\n  }\n\n  onSelectBatch(batchId: string) {\n    this.batch = batchId;\n    this.getTests(this.instituteId, batchId);\n  }\n\n  createTest() {\n    this.router.navigate([`/pages/institute/test/create-test/${this.instituteId}`], {\n      queryParams: {},\n    });\n  }\n\n  edit(id: string) {\n    this.router.navigate([`/pages/institute/test/create-test/${this.instituteId}/edit`], {\n      queryParams: { test: id, edit: 'true' },\n    });\n  }\n\n  score(id: string, batchId: string) {\n    this.router.navigate([`/pages/institute/test/add-test-score/${this.instituteId}`], {\n      queryParams: { test: id, batch: batchId },\n    });\n  }\n\n  deleteTest(id: string, i: number) {\n    this.api.deleteTest({ _id: id }).subscribe(\n      (res: any) => {\n        this.tests.splice(i, 1);\n        this.showToast('top right', 'success', 'Test Deleted Successfully');\n      },\n      (err) => {\n        this.showToast('top right', 'danger', err.err.message);\n      },\n    );\n  }\n\n  getTests(instituteId: any, batchId: any) {\n    this.api.getTestByBatch({ instituteId: instituteId, batchId: batchId }).subscribe(\n      (res: any) => {\n        this.tests = res;\n        console.log(res);\n      },\n      (err) => {\n        console.log(err);\n      },\n    );\n  }\n\n  showToast(position: any, status: any, message: any) {\n    this.toasterService.show(status, message, { position, status });\n  }\n}\n","import { TestsComponent } from './tests.component';\r\nimport { ManageTestsComponent } from './manage-tests/manage-tests.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateTestComponent } from './create-test/create-test.component';\r\nimport { ManageTestsScoreComponent } from './manage-tests-score/manage-tests-score.component';\r\nimport { CreateTestsScoreComponent } from './create-tests-score/create-tests-score.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TestsComponent,\r\n    children: [\r\n      { path: 'create-test/:id', component: CreateTestComponent },\r\n      { path: 'create-test/:id/edit', component: CreateTestComponent },\r\n      { path: 'manage-test/:id', component: ManageTestsComponent },\r\n\r\n      { path: 'add-test-score/:id', component: CreateTestsScoreComponent },\r\n      { path: 'add-test-score/:id/edit', component: CreateTestsScoreComponent },\r\n      { path: 'manage-test-score/:id', component: ManageTestsScoreComponent },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TestsRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-tests',\r\n  templateUrl: './tests.component.html',\r\n  styleUrls: [],\r\n})\r\nexport class TestsComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TestsRoutingModule } from './tests-routing.module';\r\nimport { TestsComponent } from './tests.component';\r\nimport { CreateTestComponent } from './create-test/create-test.component';\r\nimport { ManageTestsComponent } from './manage-tests/manage-tests.component';\r\nimport {\r\n  NbCardModule,\r\n  NbLayoutModule,\r\n  NbInputModule,\r\n  NbButtonModule,\r\n  NbCheckboxModule,\r\n  NbDatepickerModule,\r\n  NbSelectModule,\r\n  NbMenuModule,\r\n  NbAccordionModule,\r\n  NbListModule,\r\n} from '@nebular/theme';\r\nimport { NbEvaIconsModule } from '@nebular/eva-icons';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ManageTestsScoreComponent } from './manage-tests-score/manage-tests-score.component';\r\nimport { CreateTestsScoreComponent } from './create-tests-score/create-tests-score.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TestsComponent,\r\n    CreateTestComponent,\r\n    CreateTestsScoreComponent,\r\n    ManageTestsComponent,\r\n    ManageTestsScoreComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TestsRoutingModule,\r\n    ReactiveFormsModule,\r\n    NbCardModule,\r\n    NbLayoutModule,\r\n    FormsModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    NbDatepickerModule,\r\n    NbSelectModule,\r\n    NbMenuModule,\r\n    NbAccordionModule,\r\n    NbEvaIconsModule,\r\n    NbListModule,\r\n  ],\r\n})\r\nexport class TestsModule {}\r\n"],"sourceRoot":"webpack:///"}